

第五章

netstat 用星号“*”表示一个为0的IP地址（INADDR_ANY，通配地址）或为0的端口号

网络编程时可能会遇到的三种情况:
1、当fork子进程时，必须捕获SIGCHLD信号
2、当捕获信号时，必须处理被中断的系统调用
3、SIGCHLD的信号处理函数必须正确编写，应使用waitpid函数以免留下僵死进程


穿越套接字传递二进制结构体往往会存在两端系统答谢段不一致问题
解决该问题的常用方法：
1、把所有的数值数据作为文本串来传递。
2、显示定义所支持数据类型的二进制格式（位数、大端或小端字节序）






第十五章  UNIX域协议

使用UNIX域套接字有以下三个理由
1、在源自Berkeley的实现中，unix域套接字往往比通信两端位于同一个主机的TCP套接字快出一倍
2、UNIX域套接字可用于同一个主机上的不同进程间传递描述符
3、UNIX域套接字较新的实现把客户的凭证提供给服务器


UNIX域套接字地址结构
#include <sys/un.h>
struct sockaddr_un {
	sa_family_t	sun_family;	//posix把UNIX域协议重新命名为“本地IPC”，历史性常值AF_UNIX变为AF_LOCAL
	char		sun_path[104];	// null-terminated pathname
};



============array.c=====================

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct array {
    int size;
    int used;
    int *arr;
};


void alloc_array(struct array *array)
{
    array->arr = (int *)malloc(array->size * sizeof(int));
}

// 由低到高有序排列
void array_insert(struct array *array, int data)
{
    int i = 0;

    if (array->used >= array->size)
        return ;

    for (i = 0; i < array->used; i++)
    {
        if (array->arr[i] > data)
        {
            memmove(&array->arr[array->used], &array->arr[i], (array->used - i) * sizeof(int)); // 注意取地址
            break;
        }
    }

    array->arr[i] = data;
    array->used++;

    return ;
}

void array_dump(struct array *array)
{
    int i = 0;

    for (i = 0; i < array->used; i++)
        printf("array[%d] : %d\n", i, array->arr[i]);

    return ;
}

int array_search(struct array *array, int data)
{
    int i = 0;

    for (i = 0; i < array->used; i++)
    {
        if (array->arr[i] == data)
            return i;

        if (array->arr[i] > data)       // 优化，可以提前结束循环，去除没必要的搜索
            return -1;
    }

    return -1;
}

int array_delete(struct array *array, int index)
{
    int i = 0;

    if (index >= array->used || index < 0)  // 小于0也需要判断
    {
        return -1;
    }

    memmove(&array->arr[index], &array->arr[index+1], (array->used - index) * sizeof(int)); // memmove 最后入参是拷贝字节数
    array->used--;  // 删除之后 used也需要变更

    return 0;
}


int main(void)
{
    int index = 0;
    struct array array = {10, 0, NULL};

    alloc_array(&array);
    array_insert(&array, 1);

    // 之前memmove 最后一个入参只填写了个数,没有sizeof操作计算整的字节数，而这里测试数据又是很小，
    // 导致没有超过1个字节，虽然没拷贝全，到数据测试仍旧没有问题
    array_insert(&array, 300);  
    array_insert(&array, 2);
    array_insert(&array, 4);
    array_dump(&array);


    index = array_search(&array, 4);
    printf("index = %d\n", index);

    index = array_search(&array, 6);
    printf("index = %d\n", index);
    
    array_delete(&array, 2);
    array_dump(&array);
    array_delete(&array, 5);
    array_dump(&array);

    return 0;

}
